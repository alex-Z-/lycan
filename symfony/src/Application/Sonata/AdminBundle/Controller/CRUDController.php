<?php
namespace Application\Sonata\AdminBundle\Controller;

use AppBundle\Entity\Listing;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\PersistentCollection;
use Lycan\Providers\CoreBundle\Entity\BatchExecutions;
use Sonata\AdminBundle\Controller\CRUDController as Controller;
use AppBundle\Exception\NoBrandFoundException;
use Sonata\DoctrineORMAdminBundle\Datagrid\ProxyQuery;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class CRUDController extends Controller
{
	public function createAction(){
		try {
			return parent::createAction();
		} catch(NoBrandFoundException $e){
			$url =  $this->container->get( 'router' )->generate( 'admin_app_brand_create' );
			return  new RedirectResponse( $url );
		}
	}
	
	public function preEdit(Request $request, $object)
	{
		
		
		
		if($this->admin->getCode() === "admin.lycan.providers"){
			// We don't want to allow generic editing.
			$provider = strtolower( $object->getProviderType() );
			return new RedirectResponse(
				$this->generateUrl(
					sprintf('admin_providers_%1$s_provider%1$sauth_edit', $provider) ,
					[ "id" => (String) $object->getId()]
				)
			);
		}
		
		if($this->admin->getCode() === "admin.property" && $object instanceof Listing){
			// This is wrong. We should forward to the listing admin from here...
			return new RedirectResponse(
				$this->generateUrl(
					'admin_app_listing_edit',
					[ "id" => (String) $object->getId()]
				)
			);
		}
		parent::preEdit($request, $object); // TODO: Change the autogenerated stub
	}
	
	public function editAction($id = NULL){
		try {
			return parent::editAction();
		} catch(NoBrandFoundException $e){
			$url =  $this->container->get( 'router' )->generate( 'admin_app_brand_create' );
			return  new RedirectResponse( $url );
		}
	}
	
	public function listAction()
	{
		
		if (false === $this->admin->isGranted('LIST')) {
			throw new AccessDeniedException();
		}
		
		if ($listMode = $this->getRequest()->get('_list_mode')) {
			$this->admin->setListMode($listMode);
		}
		
		$this->admin->setSubject($this->admin->getNewInstance());
		
		$datagrid = $this->admin->getDatagrid();
		$formView = $datagrid->getForm()->createView();
		
		// set the theme for the current Admin Form
		$this->get('twig')->getExtension('form')->renderer->setTheme($formView, $this->admin->getFilterTheme());
		
		return $this->render($this->admin->getTemplate('list'), array(
			'action'     => 'list',
			'form'       => $formView,
			'datagrid'   => $datagrid,
			'csrf_token' => $this->getCsrfToken('sonata.batch'),
		));
	}
	
	// This is to pull a property...
	public function pullAction(){
		$object = $this->admin->getSubject();
		$logger = $this->container->get('app.logger.jobs');
		$em =  $this->container->get('doctrine')->getManager();
		if (!$object || $object->getProvider() === null) {
			throw new NotFoundHttpException('There is no listing available');
		}
		
		$providerKey = strtolower( $object->getProvider()->getProviderName() );
		$manager = $this->container->get('lycan.provider.manager.factory')->create($providerKey);
		if(is_null($manager)){
			throw new \Exception("Manager API Factory did not return a Valid Provider Manager.");
		}
		// Creat the batch job.
		$batch = new BatchExecutions();
		$batch->setProvider($object->getProvider());
		$em->persist($batch);
		$em->flush();
	
		$msg = [ "id" => (string) $object->getProviderListingId(), "provider" => (string) $object->getProvider()->getId(), "skipInProgressCheck" => true,  "batch" => (string) $batch->getId(), "jobsInBatch" => 1, "jobIndex" => 1 ];
		$logger->info(sprintf("Sending Property with ID of %s to Queue for fetch.", (string) $object->getId()));
	
		$this->container->get('lycan.rabbit.producer.pull_listing')->publish(serialize($msg), sprintf("lycan.provider.pull.listing.%s", $providerKey) );
	
		$this->addFlash('sonata_flash_success', sprintf('Performing a Pull Syncronization for %s (%s) ', $object->getProvider()->getNickname(), $object->getProvider()->getProviderName()));
		
		return new RedirectResponse($this->admin->generateUrl('list', $this->get('request')->query->all()));
		
		
	}
	
	
	// THIS IS TO PUSH A LISTING -
	public function pushAction(){
		
		$object = $this->admin->getSubject();
	
		if (!$object) {
			throw new NotFoundHttpException('There is no listing available');
		}
		
		$em =  $this->container->get('doctrine')->getManager();
		$provider = $object->getProvider();
		$batch = new BatchExecutions();
		$batch->setProvider($object->getProvider());
		$em->persist($object);
		$em->persist($batch);
		$em->flush();
		$this->addFlash('sonata_flash_success', sprintf( 'Performing a Push Syncronization for %s (%s) ', $object->getProvider()->getNickname(), $object->getProvider()->getProviderName() ));
		
		/// BUNCH OF LOGGGING STUFF...
		$logger = $this->container->get('app.logger.jobs');
		$logger->setBatch($batch->getId());
		$logger->debug("Creating a new batch execution job");
		$logger = $this->container->get('app.logger.user_actions')->logger;
		$logger->info(  'Manual initiation of push syncronization for Listing', ['channel' => (string)  $object->getChannel()->getId(), "nickname" => $object->getProvider()->getNickname()] );
		
		$providerKey = strtolower( $provider->getProviderName() );
		/* @var ManagerInterface */
		$manager = $this->container->get('lycan.provider.manager.factory')->create($providerKey);
		$manager->setProvider($provider);
		$manager->setBatch($batch);
		
		$closure = $manager->getQueuePushListingsClosure();
		
		$collection = new ArrayCollection();
		$collection->add($object);
		$class = $em->getClassMetadata( "AppBundle:Listing");
		$persistent = new PersistentCollection($em, $class, $collection);
		$closure( $persistent, (string) $object->getChannel()->getId() );
		
		return new RedirectResponse($this->admin->generateUrl('list'));
		
		
	}
	
	
	
	/**
	 * @param ProxyQueryInterface $selectedModelQuery
	 * @param Request             $request
	 *
	 * @return RedirectResponse
	 */
	public function batchActionPush(ProxyQuery $selectedModelQuery, Request $request = null)
	{
		if (!$this->admin->isGranted('EDIT') || !$this->admin->isGranted('DELETE')) {
			throw new AccessDeniedException();
		}
		
		$selectedModels = $selectedModelQuery->execute();
		$em =  $this->container->get('doctrine')->getManager();
		$providers = [];
		try {
			
			// We have to split each listing into unique providers.
			// You cannot push different listings into the same batch.
			foreach($selectedModels as $listing){
				$providers[ (string) $listing->getProvider()->getId() ][] = $listing;
			}
			
			foreach($providers as $providerId => $providerGroupedListings){
								
				$provider = $em->getRepository("CoreBundle:ProviderAuthBase")->find( $providerId );
				$manager = $this->container->get('lycan.provider.manager.factory')->create(  strtolower( $provider->getProviderName() ) );
				$manager->setProvider($provider);
				// Create a batch for these providers
				$batch = new BatchExecutions();
				$batch->setProvider( $provider );
				$em->persist($batch);
				$em->flush();
				
				// Set up Manager
				$manager->setBatch($batch);
								
				/// BUNCH OF LOGGGING STUFF...
				$logger = $this->container->get('app.logger.jobs');
				$logger->setBatch($batch->getId());
				$logger->debug("Creating a new batch execution job");
				$logger = $this->container->get('app.logger.user_actions')->logger;
								
				foreach($providerGroupedListings as $listing){
					$logger->info(  'Manual initiation of push syncronization for Listing via Batch Push', ['channel' => (string) $listing->getChannel()->getId(), "nickname" => $listing->getProvider()->getNickname()] );
					
				}
				$closure = $manager->getQueuePushListingsClosure();
				
				$collection = new ArrayCollection($providerGroupedListings);
				$class = $em->getClassMetadata( "AppBundle:Listing");
				$persistent = new PersistentCollection($em, $class, $collection);
				
				$closure( $persistent , (string) current($providerGroupedListings)->getChannel()->getId() );
				
			}
			
			
		} catch (\Exception $e) {
			$this->addFlash('sonata_flash_error', 'There was an error while attempting to push listings.');
			$this->addFlash('sonata_flash_error', $e->getMessage());
			return new RedirectResponse(
				$this->admin->generateUrl('list', array('filter' => $this->admin->getFilterParameters()))
			);
		}
		if(count($providers) === 1) {
			$this->addFlash('sonata_flash_success', sprintf('The selected (%d) listings from a single provider have been queued for push.', count($selectedModels), count($providers)));
		} else {
			$this->addFlash('sonata_flash_success', sprintf('The selected (%d) listings across (%d) providers have been queued for push.', count($selectedModels), count($providers)));
		}
		
		return new RedirectResponse(
			$this->admin->generateUrl('list', array('filter' => $this->admin->getFilterParameters()))
		);
	}
	
	
	
	
	
	
	
}