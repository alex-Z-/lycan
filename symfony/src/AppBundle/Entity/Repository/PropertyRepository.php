<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Brand;
use AppBundle\Entity\ChannelBrand;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Lycan\Providers\CoreBundle\Entity\ProviderAuthBase;

/**
 * PropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends \Doctrine\ORM\EntityRepository {
	
	public function findPropertyByProviderAndExternal($provider, $external)
	{
		$query = $this->_em->createQueryBuilder();
		try {
			return $query->select("p")
				->from("AppBundle:Property", "p")
				->where("p.providerListingId = :providerExternal")
				->andWhere("p.provider = :provider")
				->setParameter("provider", $provider->getId())
				->setParameter("providerExternal", $external)
				->getQuery()
				->getOneOrNullResult();
		} catch (\Exception $e) {
			return null;
		}
	}
	
	public function findMissingChannelBrandListings(ChannelBrand $channel){
		return $this->findPropertiesWithoutListingForProviderWithinBrand($channel->getProvider(), $channel->getBrand());
	}
	
	public function findPropertiesWithoutListingForProviderWithinBrand(ProviderAuthBase $provider, Brand $brand)
	{
		
		try {
			
			$sql = 'select * from lycan_property_brand_registry pb
						left join lycan_property p on p.id = pb.property_id
						 where p.deleted_at is null brand_id = :brand_id and
						p.id   
						NOT in (
							 select p.id from lycan_property l left join lycan_property p on p.id = l.master_id where l.discr = "listing" and l.provider_id = :provider_id and l.deleted_at is null
						  )';
			
			$rsm = new ResultSetMappingBuilder($this->_em);
			$rsm->addRootEntityFromClassMetadata('AppBundle\Entity\Property', 'p');
			
			$query = $this->_em->createNativeQuery($sql, $rsm);
			$query->setParameter('brand_id', (string) $brand->getId() );
			$query->setParameter('provider_id', (string) $provider->getId() );
			$properties = $query->getResult();
			return $properties;
			
			
		} catch (\Exception $e	){
			
			return null;
		}
	}
	public function findListingsByProvider($provider, $property){
		$query = $this->_em->createQueryBuilder();
		try {
			$property = $query->select("p")
				->from("AppBundle:Property", "p")
				->leftJoin("p.listings", "l")
				->where("p.id = :propertyId")
				->andWhere("l.provider = :provider")
				->setParameter("provider", $provider->getId())
				->setParameter("propertyId", $property->getId())
				->getQuery()
				->getOneOrNullResult();
			if($property){
				return $property->getListings();
			}
			return null;
			
		} catch (\Exception $e	){
			return null;
		}
	}
	

	
}
